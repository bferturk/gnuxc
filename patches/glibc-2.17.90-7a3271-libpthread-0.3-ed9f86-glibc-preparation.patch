This helps to integrate libpthread as a glibc module.  It removes a duplicate
function, defines some missing macros, uses relative library symlinks, and
writes the configure file.

--- Makefile
+++ Makefile
@@ -270,9 +270,9 @@
 	$(INSTALL_DATA) $(srcdir)/libpthread_pic.a $<
 
 ifeq ($(IN_GLIBC),yes)
-$(inst_libdir)/libpthread.so: $(objpfx)libpthread.so$(libpthread.so-version) \
+$(inst_libdir)/libpthread.so: $(inst_slibdir)/libpthread.so$(libpthread.so-version) \
 			      $(+force)
-	ln -sf $(slibdir)/libpthread.so$(libpthread.so-version) $@
+	$(make-shlib-link)
 
 libc-link.so = $(common-objpfx)libc.so
 
--- /dev/null
+++ configure
@@ -0,0 +1,2 @@
+libc_add_on_canonical=libpthread
+libc_add_on_subdirs=.
--- not-in-libc.h
+++ not-in-libc.h
@@ -6,6 +6,7 @@
 #define __thread_resume		thread_resume
 #define __thread_set_state	thread_set_state
 #define __thread_terminate	thread_terminate
+#define __thread_terminate_release	thread_terminate_release
 #define __vm_allocate		vm_allocate
 #define __vm_deallocate		vm_deallocate
 #define __sched_yield           sched_yield
--- sysdeps/mach/bits/spin-lock.h
+++ sysdeps/mach/bits/spin-lock.h
@@ -30,7 +30,7 @@
 
 /* Initializer for a spin lock object.  */
 #ifndef __PTHREAD_SPIN_LOCK_INITIALIZER
-#error __PTHREAD_SPIN_LOCK_INITIALIZER undefined: should be defined by <lock-intern.h>.
+# define __PTHREAD_SPIN_LOCK_INITIALIZER ((__pthread_spinlock_t) 0)
 #endif
 
 __END_DECLS
--- pthread/cthreads-compat.c
+++ pthread/cthreads-compat.c
@@ -70,12 +70,6 @@
   return 0;
 }
 
-void *
-__libc_getspecific (cthread_key_t key)
-{
-  return pthread_getspecific (key);
-}
-
 int
 cthread_setspecific (cthread_key_t key, void *val)
 {
