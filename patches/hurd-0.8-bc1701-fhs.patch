Tell Hurd that libexecdir is /sbin so /libexec can be removed from the install.
In addition, give Hurd its own project directory in /var/lib and use /sbin/init
for the initial program.

--- config/ttys
+++ config/ttys
@@ -4,11 +4,11 @@
 
 # name	program				type		status	comments
 
-console	"/libexec/getty 9600"		mach-gnu-color	on	secure trusted console
-tty1	"/libexec/getty 38400"		hurd		on	secure trusted console
-tty2	"/libexec/getty 38400"		hurd		on	secure trusted console
-tty3	"/libexec/getty 38400"		hurd		on	secure trusted console
-tty4	"/libexec/getty 38400"		hurd		on	secure trusted console
-tty5	"/libexec/getty 38400"		hurd		on	secure trusted console
-tty6	"/libexec/getty 38400"		hurd		on	secure trusted console
-#com0	"/libexec/getty 9600"		dialup		on	secure
+console	"/sbin/getty 9600"		mach-gnu-color	on	secure trusted console
+tty1	"/sbin/getty 38400"		hurd		on	secure trusted console
+tty2	"/sbin/getty 38400"		hurd		on	secure trusted console
+tty3	"/sbin/getty 38400"		hurd		on	secure trusted console
+tty4	"/sbin/getty 38400"		hurd		on	secure trusted console
+tty5	"/sbin/getty 38400"		hurd		on	secure trusted console
+tty6	"/sbin/getty 38400"		hurd		on	secure trusted console
+#com0	"/sbin/getty 9600"		dialup		on	secure
--- daemons/runsystem.hurd
+++ daemons/runsystem.hurd
@@ -23,8 +23,8 @@
 SHELL=/bin/sh
 
 # Programs that do multi-user startup.
-RUNCOM=/libexec/rc
-RUNTTYS=/libexec/runttys
+RUNCOM=/sbin/rc
+RUNTTYS=/sbin/runttys
 # Signals that we should pass down to runttys.
 runttys_sigs='TERM INT HUP TSTP'
 
--- doc/hurd.texi
+++ doc/hurd.texi
@@ -569,7 +569,7 @@
 it is a root filesystem, which triggers it to run @command{/hurd/startup} as PID
 2.  @command{/hurd/startup} starts the @command{/hurd/proc} and
 @command{/hurd/auth} servers.  After the servers are launched
-@command{/hurd/startup} starts the @command{/libexec/runsystem.sh} script to
+@command{/hurd/startup} starts the @command{/sbin/runsystem.sh} script to
 finish booting.
 
 After the Hurd has been booted, other sets of core Hurd servers can be
--- startup/startup.c
+++ startup/startup.c
@@ -1014,7 +1014,7 @@
 /** Running userland.  **/
 
 /* In the "split-init" setup, we just run a single program (usually
-   /libexec/runsystem) that is not expected to ever exit (or stop).
+   /sbin/runsystem) that is not expected to ever exit (or stop).
    If it does exit (or can't be started), we go to an emergency single-user
    shell as a fallback.  */
 
@@ -1082,7 +1082,7 @@
     }
 }
 
-/* Start the child program PROG.  It is run via /libexec/console-run
+/* Start the child program PROG.  It is run via /sbin/console-run
    with the given additional arguments.  */
 static int
 start_child (const char *prog, char **progargs)
@@ -1094,7 +1094,7 @@
 
   if (progargs == 0)
     {
-      const char *argv[] = { "/libexec/console-run", prog, 0 };
+      const char *argv[] = { "/sbin/console-run", prog, 0 };
       err = argz_create ((char **) argv, &args, &arglen);
     }
   else
@@ -1104,7 +1104,7 @@
 	++argc;
       {
 	const char *argv[2 + argc + 1];
-	argv[0] = "/libexec/console-run";
+	argv[0] = "/sbin/console-run";
 	argv[1] = prog;
 	argv[2 + argc] = 0;
 	while (argc-- > 0)
@@ -1167,7 +1167,7 @@
   static unsigned int try;
   static const char *const tries[] =
   {
-    "/libexec/runsystem",
+    "/sbin/init",
     _PATH_BSHELL,
     "/bin/shd",			/* XXX */
   };
@@ -1179,7 +1179,7 @@
   if (something != MACH_PORT_NULL)
     {
       mach_port_deallocate (mach_task_self (), something);
-      if (try == 0 && start_child (tries[try++], &global_argv[1]) == 0)
+      if (try == 0 && start_child (tries[try++], NULL) == 0)
         return;
     }
   else
--- sutils/MAKEDEV.sh
+++ sutils/MAKEDEV.sh
@@ -112,7 +112,7 @@
       lpr[0-9])
         st $I root 660 /hurd/streamio "$I";;
       urandom)
-	st $I root 644 /hurd/random --fast --seed-file /var/lib/random-seed;;
+	st $I root 644 /hurd/random --fast --seed-file /var/lib/hurd/random-seed;;
       null)
 	st $I root 666 /hurd/null;;
       full)
