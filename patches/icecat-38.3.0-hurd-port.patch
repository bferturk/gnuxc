Add a GNU port.  This is wildly incomplete.  Fight with it until it works.

--- build/gyp.mozbuild
+++ build/gyp.mozbuild
@@ -87,6 +87,7 @@
     'WINNT': 'win',
     'Android': 'linux' if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gonk' else 'android',
     'Linux': 'linux',
+    'gnu': 'gnu',
     'Darwin': 'mac' if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa' else 'ios',
     'SunOS': 'solaris',
     'GNU/kFreeBSD': 'freebsd',
--- dom/plugins/ipc/PluginModuleChild.cpp
+++ dom/plugins/ipc/PluginModuleChild.cpp
@@ -320,7 +320,7 @@
 
     // TODO: use PluginPRLibrary here
 
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     mShutdownFunc =
         (NP_PLUGINSHUTDOWN) PR_FindFunctionSymbol(mLibrary, "NP_Shutdown");
 
@@ -1882,7 +1882,7 @@
     AssertPluginThread();
     MOZ_ASSERT(mIsChrome);
 
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     return true;
 #elif defined(OS_WIN) || defined(OS_MACOSX)
     *_retval = mGetEntryPointsFunc(&mFunctions);
@@ -1927,7 +1927,7 @@
 #endif
 
     NPError result;
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     result = mInitializeFunc(&sBrowserFuncs, &mFunctions);
 #elif defined(OS_WIN) || defined(OS_MACOSX)
     result = mInitializeFunc(&sBrowserFuncs);
--- dom/plugins/ipc/PluginModuleChild.h
+++ dom/plugins/ipc/PluginModuleChild.h
@@ -328,7 +328,7 @@
 
     // we get this from the plugin
     NP_PLUGINSHUTDOWN mShutdownFunc;
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     NP_PLUGINUNIXINIT mInitializeFunc;
 #elif defined(OS_WIN) || defined(OS_MACOSX)
     NP_PLUGININIT mInitializeFunc;
--- dom/storage/DOMStorageDBThread.cpp
+++ dom/storage/DOMStorageDBThread.cpp
@@ -199,7 +199,7 @@
 
   if (mStopIOThread) {
     // Thread use after shutdown demanded.
-    MOZ_ASSERT(false);
+//  MOZ_ASSERT(false);
     return NS_ERROR_NOT_INITIALIZED;
   }
 
--- ipc/chromium/chromium-config.mozbuild
+++ ipc/chromium/chromium-config.mozbuild
@@ -69,5 +69,8 @@
             'OS_BSD': 1,
         })
 
+    elif CONFIG['OS_ARCH'] == 'GNU':
+        DEFINES['OS_GNU'] = 1
+
     else:
         DEFINES['OS_LINUX'] = 1
--- ipc/chromium/moz.build
+++ ipc/chromium/moz.build
@@ -13,6 +13,7 @@
 os_openbsd = 0
 os_bsd = 0
 os_linux = 0
+os_gnu = 0
 
 if CONFIG['OS_ARCH'] == 'WINNT':
     os_win = 1
@@ -32,6 +33,8 @@
     elif CONFIG['OS_ARCH'] == 'OpenBSD':
         os_openbsd = 1
         os_bsd = 1
+    elif CONFIG['OS_ARCH'] == 'GNU':
+        os_gnu = 1
     else:
         os_linux = 1
 
@@ -217,6 +220,13 @@
         else:
             LOCAL_INCLUDES += ['src/third_party/libevent/linux']
 
+if os_gnu:
+    SOURCES += [
+        'src/base/atomicops_internals_x86_gcc.cc',
+        'src/base/process_util_linux.cc',
+        'src/base/time_posix.cc',
+    ]
+
 if os_bsd:
     SOURCES += [
         'src/base/atomicops_internals_x86_gcc.cc',
--- ipc/chromium/src/base/process_util_posix.cc
+++ ipc/chromium/src/base/process_util_posix.cc
@@ -116,7 +116,7 @@
 #if defined(ANDROID)
   static const rlim_t kSystemDefaultMaxFds = 1024;
   static const char kFDDir[] = "/proc/self/fd";
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
   static const rlim_t kSystemDefaultMaxFds = 8192;
   static const char kFDDir[] = "/proc/self/fd";
 #elif defined(OS_MACOSX)
@@ -208,7 +208,7 @@
 // TODO(agl): Remove this function. It's fundamentally broken for multithreaded
 // apps.
 void SetAllFDsToCloseOnExec() {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_GNU)
   const char fd_dir[] = "/proc/self/fd";
 #elif defined(OS_MACOSX) || defined(OS_BSD)
   const char fd_dir[] = "/dev/fd";
--- ipc/chromium/src/build/build_config.h
+++ ipc/chromium/src/build/build_config.h
@@ -20,6 +20,8 @@
 #define OS_LINUX 1
 #elif defined(__APPLE__)
 #define OS_MACOSX 1
+#elif defined(__GNU__)
+#define OS_GNU 1
 #elif defined(__linux__)
 #define OS_LINUX 1
 #elif defined(__DragonFly__)
@@ -45,7 +47,7 @@
 
 // For access to standard POSIX features, use OS_POSIX instead of a more
 // specific macro.
-#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
 #define OS_POSIX 1
 #endif
 
--- ipc/chromium/src/chrome/common/transport_dib.h
+++ ipc/chromium/src/chrome/common/transport_dib.h
@@ -13,7 +13,7 @@
 
 #if defined(OS_WIN)
 #include <windows.h>
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
 #include "chrome/common/x11_util.h"
 #endif
 
@@ -66,7 +66,7 @@
   typedef base::SharedMemoryHandle Handle;
   // On Mac, the inode number of the backing file is used as an id.
   typedef base::SharedMemoryId Id;
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
   typedef int Handle;  // These two ints are SysV IPC shared memory keys
   typedef int Id;
 #endif
@@ -96,7 +96,7 @@
   // wire to give this transport DIB to another process.
   Handle handle() const;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_GNU)
   // Map the shared memory into the X server and return an id for the shared
   // segment.
   XID MapToX(Display* connection);
@@ -107,7 +107,7 @@
 #if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_BSD)
   explicit TransportDIB(base::SharedMemoryHandle dib);
   base::SharedMemory shared_memory_;
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
   int key_;  // SysV shared memory id
   void* address_;  // mapped address
   XID x_shm_;  // X id for the shared segment
--- ipc/glue/CrossProcessMutex.h
+++ ipc/glue/CrossProcessMutex.h
@@ -9,7 +9,7 @@
 #include "base/process.h"
 #include "mozilla/Mutex.h"
 
-#if defined(OS_LINUX) || defined(OS_MACOSX)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_GNU)
 #include <pthread.h>
 #include "SharedMemoryBasic.h"
 #include "mozilla/Atomics.h"
@@ -34,7 +34,7 @@
 namespace mozilla {
 #if defined(OS_WIN)
 typedef HANDLE CrossProcessMutexHandle;
-#elif defined(OS_LINUX) || defined(OS_MACOSX)
+#elif defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_GNU)
 typedef mozilla::ipc::SharedMemoryBasic::Handle CrossProcessMutexHandle;
 #else
 // Stub for other platforms. We can't use uintptr_t here since different
@@ -100,7 +100,7 @@
 
 #if defined(OS_WIN)
   HANDLE mMutex;
-#elif defined(OS_LINUX) || defined(OS_MACOSX)
+#elif defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_GNU)
   nsRefPtr<mozilla::ipc::SharedMemoryBasic> mSharedBuffer;
   pthread_mutex_t* mMutex;
   mozilla::Atomic<int32_t>* mCount;
--- ipc/glue/GeckoChildProcessHost.cpp
+++ ipc/glue/GeckoChildProcessHost.cpp
@@ -547,7 +547,7 @@
   // and passing wstrings from one config to the other is unsafe.  So
   // we split the logic here.
 
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD) || defined(OS_GNU)
   base::environment_map newEnvVars;
   ChildPrivileges privs = mPrivileges;
   if (privs == base::PRIVILEGES_DEFAULT) {
@@ -561,7 +561,7 @@
     MOZ_ASSERT(gGREBinPath);
     nsCString path;
     NS_CopyUnicodeToNative(nsDependentString(gGREBinPath), path);
-# if defined(OS_LINUX) || defined(OS_BSD)
+# if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
 #  if defined(MOZ_WIDGET_ANDROID)
     path += "/lib";
 #  endif  // MOZ_WIDGET_ANDROID
@@ -686,7 +686,7 @@
   childArgv.push_back(pidstring);
 
 #if defined(MOZ_CRASHREPORTER)
-#  if defined(OS_LINUX) || defined(OS_BSD)
+#  if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
   int childCrashFd, childCrashRemapFd;
   if (!CrashReporter::CreateNotificationPipeForChild(
         &childCrashFd, &childCrashRemapFd))
@@ -719,7 +719,7 @@
   childArgv.push_back(childProcessType);
 
   base::LaunchApp(childArgv, mFileMap,
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD) || defined(OS_GNU)
                   newEnvVars, privs,
 #endif
                   false, &process, arch);
--- ipc/glue/moz.build
+++ ipc/glue/moz.build
@@ -59,7 +59,7 @@
     SOURCES += [
         'CrossProcessMutex_windows.cpp',
     ]
-elif CONFIG['OS_ARCH'] in ('Linux', 'Darwin'):
+elif CONFIG['OS_ARCH'] in ('Linux', 'Darwin', 'GNU'):
     UNIFIED_SOURCES += [
         'CrossProcessMutex_posix.cpp',
     ]
--- js/src/asmjs/AsmJSSignalHandlers.cpp
+++ js/src/asmjs/AsmJSSignalHandlers.cpp
@@ -115,8 +115,8 @@
 # define R13_sig(p) ((p)->sc_r13)
 # define R14_sig(p) ((p)->sc_r14)
 # define R15_sig(p) ((p)->sc_r15)
-#elif defined(__linux__) || defined(SOLARIS)
-# if defined(__linux__)
+#elif defined(__linux__) || defined(__GNU__) || defined(SOLARIS)
+# if defined(__linux__) || defined(__GNU__)
 #  define XMM_sig(p,i) ((p)->uc_mcontext.fpregs->_xmm[i])
 #  define EIP_sig(p) ((p)->uc_mcontext.gregs[REG_EIP])
 # else
--- netwerk/sctp/src/netinet/sctp_os_userspace.h
+++ netwerk/sctp/src/netinet/sctp_os_userspace.h
@@ -429,7 +429,7 @@
 /* #include <sys/param.h>  in FreeBSD defines MSIZE */
 /* #include <sys/ktr.h> */
 /* #include <sys/systm.h> */
-#if defined(__Userspace_os_Windows)
+#if defined(__Userspace_os_Windows) || defined(__Userspace_os_gnu)
 #include <user_queue.h>
 #else
 #include <sys/queue.h>
@@ -523,7 +523,7 @@
 #include <netinet/ip6.h>
 #include <netinet/icmp6.h>
 #endif
-#if defined(__Userspace_os_Darwin) || defined(__Userspace_os_FreeBSD) || defined(__Userspace_os_Linux) || defined(__Userspace_os_NetBSD) || defined(__Userspace_os_OpenBSD) || defined(__Userspace_os_Windows)
+#if defined(__Userspace_os_Darwin) || defined(__Userspace_os_FreeBSD) || defined(__Userspace_os_Linux) || defined(__Userspace_os_NetBSD) || defined(__Userspace_os_OpenBSD) || defined(__Userspace_os_Windows) || defined(__Userspace_os_gnu)
 #include "user_ip6_var.h"
 #else
 #include <netinet6/ip6_var.h>
--- netwerk/sctp/src/netinet/sctp_output.c
+++ netwerk/sctp/src/netinet/sctp_output.c
@@ -54,7 +54,7 @@
 #include <netinet/sctp_bsd_addr.h>
 #include <netinet/sctp_input.h>
 #include <netinet/sctp_crc32.h>
-#if defined(__Userspace_os_Linux)
+#if defined(__Userspace_os_Linux) || defined(__Userspace_os_gnu)
 #define __FAVOR_BSD    /* (on Ubuntu at least) enables UDP header field names like BSD in RFC 768 */
 #endif
 #if !defined(__Userspace_os_Windows)
--- netwerk/sctp/src/user_ip6_var.h
+++ netwerk/sctp/src/user_ip6_var.h
@@ -87,13 +87,11 @@
 #if defined(__Userspace_os_Windows)
 #define s6_addr16 u.Word
 #endif
-#if !defined(__Userspace_os_Windows)
-#if !defined(__Userspace_os_Linux)
+#if !defined(__Userspace_os_Windows) && !defined(__Userspace_os_Linux) && !defined(__Userspace_os_gnu)
 #define s6_addr8  __u6_addr.__u6_addr8
 #define s6_addr16 __u6_addr.__u6_addr16
 #define s6_addr32 __u6_addr.__u6_addr32
 #endif
-#endif
 
 #if !defined(__Userspace_os_FreeBSD) && !defined(__Userspace_os_OpenBSD) && !defined(__Userspace_os_DragonFly)
 struct route_in6 {
--- netwerk/sctp/src/user_recv_thread.c
+++ netwerk/sctp/src/user_recv_thread.c
@@ -32,6 +32,11 @@
 #include <sys/types.h>
 #if !defined(__Userspace_os_Windows)
 #include <sys/socket.h>
+#ifndef __USE_GNU
+# define __USE_GNU
+# include <netinet/in.h>
+# undef __USE_GNU
+#endif
 #include <netinet/in.h>
 #include <unistd.h>
 #include <pthread.h>
--- netwerk/sctp/src/user_socket.c
+++ netwerk/sctp/src/user_socket.c
@@ -1,3 +1,5 @@
+#define ERESTART EINTR
+#define UIO_MAXIOV 1024
 /*-
  * Copyright (c) 1982, 1986, 1988, 1990, 1993
  *      The Regents of the University of California.
@@ -42,7 +44,7 @@
 #ifdef INET6
 #include <netinet6/sctp6_var.h>
 #endif
-#if defined(__Userspace_os_Linux)
+#if defined(__Userspace_os_Linux) || defined(__Userspace_os_gnu)
 #define __FAVOR_BSD    /* (on Ubuntu at least) enables UDP header field names like BSD in RFC 768 */
 #endif
 #if !defined (__Userspace_os_Windows)
--- storage/src/mozStorageConnection.cpp
+++ storage/src/mozStorageConnection.cpp
@@ -500,8 +500,8 @@
 {
   (void)Close();
 
-  MOZ_ASSERT(!mAsyncExecutionThread,
-             "AsyncClose has not been invoked on this connection!");
+//MOZ_ASSERT(!mAsyncExecutionThread,
+//           "AsyncClose has not been invoked on this connection!");
 }
 
 NS_IMPL_ADDREF(Connection)
--- toolkit/library/libxul.mk
+++ toolkit/library/libxul.mk
@@ -4,7 +4,7 @@
 
 EXTRA_DEPS += $(topsrcdir)/toolkit/library/libxul.mk
 
-ifeq (Linux,$(OS_ARCH))
+ifneq (,$(filter Linux GNU,$(OS_ARCH)))
 ifneq (Android,$(OS_TARGET))
 OS_LDFLAGS += -Wl,-version-script,symverscript
 
@@ -29,7 +29,7 @@
 # Generate GDB pretty printer-autoload files only on Linux. OSX's GDB is
 # too old to support Python pretty-printers; if this changes, we could make
 # this 'ifdef GNU_CC'.
-ifeq (Linux,$(OS_ARCH))
+ifdef GNU_CC
 # Create a GDB Python auto-load file alongside the libxul shared library in
 # the build directory.
 PP_TARGETS += LIBXUL_AUTOLOAD
