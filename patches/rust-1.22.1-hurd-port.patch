Support enough of Hurd's glibc to cross-compile std so it can be used with the
host's Rust compiler.  This mostly reuses the Linux code.

--- src/liblibc/src/unix/mod.rs
+++ src/liblibc/src/unix/mod.rs
@@ -707,6 +707,7 @@
     pub fn gai_strerror(errcode: ::c_int) -> *const ::c_char;
     #[cfg_attr(any(
                    all(target_os = "linux", not(target_env = "musl")),
+                   target_os = "gnu",
                    target_os = "freebsd",
                    target_os = "dragonfly",
                    target_os = "haiku"),
@@ -874,6 +875,7 @@
         mod newlib;
         pub use self::newlib::*;
     } else if #[cfg(any(target_os = "linux",
+                        target_os = "gnu",
                         target_os = "android",
                         target_os = "emscripten",
                         target_os = "fuchsia"))] {
--- src/liblibc/src/unix/notbsd/linux/mod.rs
+++ src/liblibc/src/unix/notbsd/linux/mod.rs
@@ -667,7 +667,11 @@
 pub const PTHREAD_MUTEX_DEFAULT: ::c_int = PTHREAD_MUTEX_NORMAL;
 pub const PTHREAD_PROCESS_PRIVATE: ::c_int = 0;
 pub const PTHREAD_PROCESS_SHARED: ::c_int = 1;
+
+#[cfg(not(target_os = "gnu"))]
 pub const __SIZEOF_PTHREAD_COND_T: usize = 48;
+#[cfg(target_os = "gnu")]
+pub const __SIZEOF_PTHREAD_COND_T: usize = 20;
 
 pub const SCHED_OTHER: ::c_int = 0;
 pub const SCHED_FIFO: ::c_int = 1;
--- src/liblibc/src/unix/notbsd/linux/other/b32/mod.rs
+++ src/liblibc/src/unix/notbsd/linux/other/b32/mod.rs
@@ -70,17 +70,32 @@
 pub const RLIMIT_NOFILE: ::c_int = 7;
 pub const RLIMIT_NPROC: ::c_int = 6;
 
-pub const O_APPEND: ::c_int = 1024;
-pub const O_CREAT: ::c_int = 64;
-pub const O_EXCL: ::c_int = 128;
-pub const O_NOCTTY: ::c_int = 256;
-pub const O_NONBLOCK: ::c_int = 2048;
-pub const O_SYNC: ::c_int = 1052672;
-pub const O_RSYNC: ::c_int = 1052672;
-pub const O_DSYNC: ::c_int = 4096;
-pub const O_FSYNC: ::c_int = 0x101000;
-pub const O_NOATIME: ::c_int = 0o1000000;
-pub const O_PATH: ::c_int = 0o10000000;
+cfg_if! {
+    if #[cfg(not(target_os = "gnu"))] {
+        pub const O_APPEND: ::c_int = 1024;
+        pub const O_CREAT: ::c_int = 64;
+        pub const O_EXCL: ::c_int = 128;
+        pub const O_NOCTTY: ::c_int = 256;
+        pub const O_NONBLOCK: ::c_int = 2048;
+        pub const O_SYNC: ::c_int = 1052672;
+        pub const O_RSYNC: ::c_int = 1052672;
+        pub const O_DSYNC: ::c_int = 4096;
+        pub const O_FSYNC: ::c_int = 0x101000;
+        pub const O_NOATIME: ::c_int = 0o1000000;
+        pub const O_PATH: ::c_int = 0o10000000;
+    } else {
+        pub const O_APPEND: ::c_int = 0x0100;
+        pub const O_CREAT: ::c_int = 0x0010;
+        pub const O_EXCL: ::c_int = 0x0020;
+        pub const O_NOCTTY: ::c_int = 0;
+        pub const O_NONBLOCK: ::c_int = 0x0008;
+        pub const O_SYNC: ::c_int = 0x0400;
+        pub const O_RSYNC: ::c_int = O_SYNC;
+        pub const O_DSYNC: ::c_int = O_SYNC;
+        pub const O_FSYNC: ::c_int = O_SYNC;
+        pub const O_NOATIME: ::c_int = 0x0800;
+    }
+}
 
 pub const MAP_GROWSDOWN: ::c_int = 0x0100;
 
@@ -242,9 +257,15 @@
 
 pub const NCCS: usize = 32;
 
-pub const O_TRUNC: ::c_int = 512;
-
-pub const O_CLOEXEC: ::c_int = 0x80000;
+cfg_if! {
+    if #[cfg(not(target_os = "gnu"))] {
+        pub const O_TRUNC: ::c_int = 512;
+        pub const O_CLOEXEC: ::c_int = 0x80000;
+    } else {
+        pub const O_TRUNC: ::c_int = 0x10000;
+        pub const O_CLOEXEC: ::c_int = 0x400000;
+    }
+}
 
 pub const EBFONT: ::c_int = 59;
 pub const ENOSTR: ::c_int = 60;
@@ -270,11 +291,23 @@
 
 pub const EFD_CLOEXEC: ::c_int = 0x80000;
 
-pub const __SIZEOF_PTHREAD_CONDATTR_T: usize = 4;
-pub const __SIZEOF_PTHREAD_MUTEX_T: usize = 24;
-pub const __SIZEOF_PTHREAD_RWLOCK_T: usize = 32;
-pub const __SIZEOF_PTHREAD_MUTEXATTR_T: usize = 4;
-pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: usize = 8;
+cfg_if! {
+    if #[cfg(not(target_os = "gnu"))] {
+        // Linux nptl
+        pub const __SIZEOF_PTHREAD_CONDATTR_T: usize = 4;
+        pub const __SIZEOF_PTHREAD_MUTEX_T: usize = 24;
+        pub const __SIZEOF_PTHREAD_RWLOCK_T: usize = 32;
+        pub const __SIZEOF_PTHREAD_MUTEXATTR_T: usize = 4;
+        pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: usize = 8;
+    } else {
+        // Hurd libpthread
+        pub const __SIZEOF_PTHREAD_CONDATTR_T: usize = 8;
+        pub const __SIZEOF_PTHREAD_MUTEX_T: usize = 32;
+        pub const __SIZEOF_PTHREAD_RWLOCK_T: usize = 28;
+        pub const __SIZEOF_PTHREAD_MUTEXATTR_T: usize = 16;
+        pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: usize = 4;
+    }
+}
 
 pub const PTRACE_GETFPREGS: ::c_uint = 14;
 pub const PTRACE_SETFPREGS: ::c_uint = 15;
--- src/liblibc/src/unix/notbsd/linux/other/b32/x86.rs
+++ src/liblibc/src/unix/notbsd/linux/other/b32/x86.rs
@@ -223,8 +223,15 @@
 pub const SO_RCVTIMEO: ::c_int = 20;
 pub const SO_SNDTIMEO: ::c_int = 21;
 
-pub const FIOCLEX: ::c_ulong = 0x5451;
-pub const FIONBIO: ::c_ulong = 0x5421;
+cfg_if! {
+    if #[cfg(not(target_os = "gnu"))] {
+        pub const FIOCLEX: ::c_ulong = 0x5451;
+        pub const FIONBIO: ::c_ulong = 0x5421;
+    } else {
+        pub const FIOCLEX: ::c_ulong = 0x00000001;
+        pub const FIONBIO: ::c_ulong = 0xA008007E;
+    }
+}
 
 pub const PTRACE_GETFPXREGS: ::c_uint = 18;
 pub const PTRACE_SETFPXREGS: ::c_uint = 19;
--- src/liblibc/src/unix/notbsd/mod.rs
+++ src/liblibc/src/unix/notbsd/mod.rs
@@ -53,6 +53,7 @@
         pub ai_addrlen: socklen_t,
 
         #[cfg(any(target_os = "linux",
+                  target_os = "gnu",
                   target_os = "emscripten",
                   target_os = "fuchsia"))]
         pub ai_addr: *mut ::sockaddr,
@@ -259,9 +260,17 @@
 
 pub const RUSAGE_SELF: ::c_int = 0;
 
-pub const O_RDONLY: ::c_int = 0;
-pub const O_WRONLY: ::c_int = 1;
-pub const O_RDWR: ::c_int = 2;
+cfg_if! {
+    if #[cfg(not(target_os = "gnu"))] {
+        pub const O_RDONLY: ::c_int = 0;
+        pub const O_WRONLY: ::c_int = 1;
+        pub const O_RDWR: ::c_int = 2;
+    } else {
+        pub const O_RDONLY: ::c_int = 1;
+        pub const O_WRONLY: ::c_int = 2;
+        pub const O_RDWR: ::c_int = 3;
+    }
+}
 
 pub const SOCK_CLOEXEC: ::c_int = O_CLOEXEC;
 
@@ -366,40 +375,79 @@
 pub const MS_MGC_MSK: ::c_ulong = 0xffff0000;
 pub const MS_RMT_MASK: ::c_ulong = 0x800051;
 
-pub const EPERM: ::c_int = 1;
-pub const ENOENT: ::c_int = 2;
-pub const ESRCH: ::c_int = 3;
-pub const EINTR: ::c_int = 4;
-pub const EIO: ::c_int = 5;
-pub const ENXIO: ::c_int = 6;
-pub const E2BIG: ::c_int = 7;
-pub const ENOEXEC: ::c_int = 8;
-pub const EBADF: ::c_int = 9;
-pub const ECHILD: ::c_int = 10;
-pub const EAGAIN: ::c_int = 11;
-pub const ENOMEM: ::c_int = 12;
-pub const EACCES: ::c_int = 13;
-pub const EFAULT: ::c_int = 14;
-pub const ENOTBLK: ::c_int = 15;
-pub const EBUSY: ::c_int = 16;
-pub const EEXIST: ::c_int = 17;
-pub const EXDEV: ::c_int = 18;
-pub const ENODEV: ::c_int = 19;
-pub const ENOTDIR: ::c_int = 20;
-pub const EISDIR: ::c_int = 21;
-pub const EINVAL: ::c_int = 22;
-pub const ENFILE: ::c_int = 23;
-pub const EMFILE: ::c_int = 24;
-pub const ENOTTY: ::c_int = 25;
-pub const ETXTBSY: ::c_int = 26;
-pub const EFBIG: ::c_int = 27;
-pub const ENOSPC: ::c_int = 28;
-pub const ESPIPE: ::c_int = 29;
-pub const EROFS: ::c_int = 30;
-pub const EMLINK: ::c_int = 31;
-pub const EPIPE: ::c_int = 32;
-pub const EDOM: ::c_int = 33;
-pub const ERANGE: ::c_int = 34;
+cfg_if! {
+    if #[cfg(not(target_os = "gnu"))] {
+        pub const EPERM: ::c_int = 1;
+        pub const ENOENT: ::c_int = 2;
+        pub const ESRCH: ::c_int = 3;
+        pub const EINTR: ::c_int = 4;
+        pub const EIO: ::c_int = 5;
+        pub const ENXIO: ::c_int = 6;
+        pub const E2BIG: ::c_int = 7;
+        pub const ENOEXEC: ::c_int = 8;
+        pub const EBADF: ::c_int = 9;
+        pub const ECHILD: ::c_int = 10;
+        pub const EAGAIN: ::c_int = 11;
+        pub const ENOMEM: ::c_int = 12;
+        pub const EACCES: ::c_int = 13;
+        pub const EFAULT: ::c_int = 14;
+        pub const ENOTBLK: ::c_int = 15;
+        pub const EBUSY: ::c_int = 16;
+        pub const EEXIST: ::c_int = 17;
+        pub const EXDEV: ::c_int = 18;
+        pub const ENODEV: ::c_int = 19;
+        pub const ENOTDIR: ::c_int = 20;
+        pub const EISDIR: ::c_int = 21;
+        pub const EINVAL: ::c_int = 22;
+        pub const ENFILE: ::c_int = 23;
+        pub const EMFILE: ::c_int = 24;
+        pub const ENOTTY: ::c_int = 25;
+        pub const ETXTBSY: ::c_int = 26;
+        pub const EFBIG: ::c_int = 27;
+        pub const ENOSPC: ::c_int = 28;
+        pub const ESPIPE: ::c_int = 29;
+        pub const EROFS: ::c_int = 30;
+        pub const EMLINK: ::c_int = 31;
+        pub const EPIPE: ::c_int = 32;
+        pub const EDOM: ::c_int = 33;
+        pub const ERANGE: ::c_int = 34;
+    } else {
+        pub const EPERM: ::c_int = 0x40000001;
+        pub const ENOENT: ::c_int = 0x40000002;
+        pub const ESRCH: ::c_int = 0x40000003;
+        pub const EINTR: ::c_int = 0x40000004;
+        pub const EIO: ::c_int = 0x40000005;
+        pub const ENXIO: ::c_int = 0x40000006;
+        pub const E2BIG: ::c_int = 0x40000007;
+        pub const ENOEXEC: ::c_int = 0x40000008;
+        pub const EBADF: ::c_int = 0x40000009;
+        pub const ECHILD: ::c_int = 0x4000000A;
+        pub const EAGAIN: ::c_int = 0x40000029;
+        pub const ENOMEM: ::c_int = 0x4000000C;
+        pub const EACCES: ::c_int = 0x4000000D;
+        pub const EFAULT: ::c_int = 0x4000000E;
+        pub const ENOTBLK: ::c_int = 0x4000000F;
+        pub const EBUSY: ::c_int = 0x40000010;
+        pub const EEXIST: ::c_int = 0x40000011;
+        pub const EXDEV: ::c_int = 0x40000012;
+        pub const ENODEV: ::c_int = 0x40000013;
+        pub const ENOTDIR: ::c_int = 0x40000014;
+        pub const EISDIR: ::c_int = 0x40000015;
+        pub const EINVAL: ::c_int = 0x40000016;
+        pub const ENFILE: ::c_int = 0x40000017;
+        pub const EMFILE: ::c_int = 0x40000018;
+        pub const ENOTTY: ::c_int = 0x40000019;
+        pub const ETXTBSY: ::c_int = 0x40000020;
+        pub const EFBIG: ::c_int = 0x40000021;
+        pub const ENOSPC: ::c_int = 0x40000022;
+        pub const ESPIPE: ::c_int = 0x40000023;
+        pub const EROFS: ::c_int = 0x40000024;
+        pub const EMLINK: ::c_int = 0x40000025;
+        pub const EPIPE: ::c_int = 0x40000026;
+        pub const EDOM: ::c_int = 0x40000027;
+        pub const ERANGE: ::c_int = 0x40000028;
+    }
+}
 pub const EWOULDBLOCK: ::c_int = EAGAIN;
 
 pub const SCM_RIGHTS: ::c_int = 0x01;
@@ -612,7 +660,10 @@
 
 pub const PATH_MAX: ::c_int = 4096;
 
+#[cfg(not(target_os = "gnu"))]
 pub const FD_SETSIZE: usize = 1024;
+#[cfg(target_os = "gnu")]
+pub const FD_SETSIZE: usize = 256;
 
 pub const EPOLLIN: ::c_int = 0x1;
 pub const EPOLLPRI: ::c_int = 0x2;
@@ -981,7 +1032,7 @@
     if #[cfg(target_os = "emscripten")] {
         mod emscripten;
         pub use self::emscripten::*;
-    } else if #[cfg(any(target_os = "linux", target_os = "fuchsia"))] {
+    } else if #[cfg(any(target_os = "linux", target_os = "gnu", target_os = "fuchsia"))] {
         mod linux;
         pub use self::linux::*;
     } else if #[cfg(target_os = "android")] {
--- src/librustc_data_structures/flock.rs
+++ src/librustc_data_structures/flock.rs
@@ -50,6 +50,29 @@
         pub const F_SETLKW: libc::c_int = 7;
     }
 
+    #[cfg(target_os = "gnu")]
+    mod os {
+        use libc;
+
+        #[repr(C)]
+        pub struct flock {
+            pub l_type: libc::c_int,
+            pub l_whence: libc::c_int,
+            pub l_start: libc::off_t,
+            pub l_len: libc::off_t,
+            pub l_pid: libc::pid_t,
+
+            // not actually here, but brings in line with freebsd
+            pub l_sysid: libc::c_int,
+        }
+
+        pub const F_RDLCK: libc::c_int = 1;
+        pub const F_WRLCK: libc::c_int = 2;
+        pub const F_UNLCK: libc::c_int = 3;
+        pub const F_SETLK: libc::c_int = 8;
+        pub const F_SETLKW: libc::c_int = 9;
+    }
+
     #[cfg(target_os = "freebsd")]
     mod os {
         use libc;
--- src/librustdoc/clean/cfg.rs
+++ src/librustdoc/clean/cfg.rs
@@ -332,6 +332,7 @@
                         "emscripten" => "Emscripten",
                         "freebsd" => "FreeBSD",
                         "fuchsia" => "Fuchsia",
+                        "gnu" => "GNU Hurd",
                         "haiku" => "Haiku",
                         "ios" => "iOS",
                         "l4re" => "L4Re",
--- src/libstd/os/mod.rs
+++ src/libstd/os/mod.rs
@@ -27,7 +27,7 @@
 #[stable(feature = "rust1", since = "1.0.0")]
 pub use sys::windows_ext as windows;
 
-#[cfg(any(dox, target_os = "linux", target_os = "l4re"))]
+#[cfg(any(dox, target_os = "linux", target_os = "gnu", target_os = "l4re"))]
 #[doc(cfg(target_os = "linux"))]
 pub mod linux;
 
--- src/libstd/sys/unix/args.rs
+++ src/libstd/sys/unix/args.rs
@@ -56,6 +56,7 @@
 }
 
 #[cfg(any(target_os = "linux",
+          target_os = "gnu",
           target_os = "android",
           target_os = "freebsd",
           target_os = "dragonfly",
--- src/libstd/sys/unix/env.rs
+++ src/libstd/sys/unix/env.rs
@@ -19,6 +19,17 @@
     pub const EXE_EXTENSION: &'static str = "";
 }
 
+#[cfg(target_os = "gnu")]
+pub mod os {
+    pub const FAMILY: &'static str = "unix";
+    pub const OS: &'static str = "gnu";
+    pub const DLL_PREFIX: &'static str = "lib";
+    pub const DLL_SUFFIX: &'static str = ".so";
+    pub const DLL_EXTENSION: &'static str = "so";
+    pub const EXE_SUFFIX: &'static str = "";
+    pub const EXE_EXTENSION: &'static str = "";
+}
+
 #[cfg(target_os = "macos")]
 pub mod os {
     pub const FAMILY: &'static str = "unix";
--- src/libstd/sys/unix/fast_thread_local.rs
+++ src/libstd/sys/unix/fast_thread_local.rs
@@ -20,7 +20,7 @@
 // fallback implementation to use as well.
 //
 // Due to rust-lang/rust#18804, make sure this is not generic!
-#[cfg(target_os = "linux")]
+#[cfg(any(target_os = "linux", target_os = "gnu"))]
 pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {
     use libc;
     use mem;
--- src/libstd/sys/unix/fd.rs
+++ src/libstd/sys/unix/fd.rs
@@ -83,9 +83,9 @@
         unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)
             -> io::Result<isize>
         {
-            #[cfg(target_os = "linux")]
+            #[cfg(any(target_os = "linux", target_os = "gnu"))]
             use libc::pread64;
-            #[cfg(not(target_os = "linux"))]
+            #[cfg(not(any(target_os = "linux", target_os = "gnu")))]
             use libc::pread as pread64;
             cvt(pread64(fd, buf, count, offset))
         }
@@ -124,9 +124,9 @@
         unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)
             -> io::Result<isize>
         {
-            #[cfg(target_os = "linux")]
+            #[cfg(any(target_os = "linux", target_os = "gnu"))]
             use libc::pwrite64;
-            #[cfg(not(target_os = "linux"))]
+            #[cfg(not(any(target_os = "linux", target_os = "gnu")))]
             use libc::pwrite as pwrite64;
             cvt(pwrite64(fd, buf, count, offset))
         }
@@ -169,7 +169,7 @@
         }
     }
 
-    #[cfg(target_os = "linux")]
+    #[cfg(any(target_os = "linux", target_os = "gnu"))]
     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
         unsafe {
             let v = nonblocking as c_int;
@@ -178,7 +178,7 @@
         }
     }
 
-    #[cfg(not(target_os = "linux"))]
+    #[cfg(not(any(target_os = "linux", target_os = "gnu")))]
     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {
         unsafe {
             let previous = cvt(libc::fcntl(self.fd, libc::F_GETFL))?;
--- src/libstd/sys/unix/fs.rs
+++ src/libstd/sys/unix/fs.rs
@@ -23,18 +23,20 @@
 use sys::{cvt, cvt_r};
 use sys_common::{AsInner, FromInner};
 
-#[cfg(any(target_os = "linux", target_os = "emscripten", target_os = "l4re"))]
+#[cfg(any(target_os = "linux", target_os = "gnu", target_os = "emscripten", target_os = "l4re"))]
 use libc::{stat64, fstat64, lstat64, off64_t, ftruncate64, lseek64, dirent64, readdir64_r, open64};
 #[cfg(target_os = "android")]
 use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, lseek64,
            dirent as dirent64, open as open64};
 #[cfg(not(any(target_os = "linux",
+              target_os = "gnu",
               target_os = "emscripten",
               target_os = "l4re",
               target_os = "android")))]
 use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, off_t as off64_t,
            ftruncate as ftruncate64, lseek as lseek64, dirent as dirent64, open as open64};
 #[cfg(not(any(target_os = "linux",
+              target_os = "gnu",
               target_os = "emscripten",
               target_os = "solaris",
               target_os = "l4re",
@@ -314,6 +316,7 @@
     #[cfg(any(target_os = "macos",
               target_os = "ios",
               target_os = "linux",
+              target_os = "gnu",
               target_os = "emscripten",
               target_os = "android",
               target_os = "solaris",
@@ -348,6 +351,7 @@
     }
     #[cfg(any(target_os = "android",
               target_os = "linux",
+              target_os = "gnu",
               target_os = "emscripten",
               target_os = "l4re",
               target_os = "haiku"))]
--- src/libstd/sys/unix/mod.rs
+++ src/libstd/sys/unix/mod.rs
@@ -28,6 +28,7 @@
 #[cfg(all(not(dox), target_os = "emscripten"))] pub use os::emscripten as platform;
 #[cfg(all(not(dox), target_os = "fuchsia"))]   pub use os::fuchsia as platform;
 #[cfg(all(not(dox), target_os = "l4re"))]      pub use os::linux as platform;
+#[cfg(all(not(dox), target_os = "gnu"))]       pub use os::linux as platform;
 
 #[macro_use]
 pub mod weak;
--- src/libstd/sys/unix/os.rs
+++ src/libstd/sys/unix/os.rs
@@ -39,6 +39,7 @@
 extern {
     #[cfg(not(target_os = "dragonfly"))]
     #[cfg_attr(any(target_os = "linux",
+                   target_os = "gnu",
                    target_os = "emscripten",
                    target_os = "fuchsia",
                    target_os = "l4re"),
@@ -254,7 +255,7 @@
     }
 }
 
-#[cfg(any(target_os = "linux", target_os = "android", target_os = "emscripten"))]
+#[cfg(any(target_os = "linux", target_os = "gnu", target_os = "android", target_os = "emscripten"))]
 pub fn current_exe() -> io::Result<PathBuf> {
     let selfexe = PathBuf::from("/proc/self/exe");
     if selfexe.exists() {
--- src/libstd/sys/unix/stack_overflow.rs
+++ src/libstd/sys/unix/stack_overflow.rs
@@ -35,6 +35,7 @@
 }
 
 #[cfg(any(target_os = "linux",
+          target_os = "gnu",
           target_os = "macos",
           target_os = "bitrig",
           target_os = "dragonfly",
@@ -60,7 +61,7 @@
     // This is initialized in init() and only read from after
     static mut PAGE_SIZE: usize = 0;
 
-    #[cfg(any(target_os = "linux", target_os = "android"))]
+    #[cfg(any(target_os = "linux", target_os = "gnu", target_os = "android"))]
     unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {
         #[repr(C)]
         struct siginfo_t {
@@ -71,7 +72,7 @@
         (*(info as *const siginfo_t)).si_addr as usize
     }
 
-    #[cfg(not(any(target_os = "linux", target_os = "android")))]
+    #[cfg(not(any(target_os = "linux", target_os = "gnu", target_os = "android")))]
     unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {
         (*info).si_addr as usize
     }
@@ -154,6 +155,7 @@
     }
 
     #[cfg(any(target_os = "linux",
+              target_os = "gnu",
               target_os = "macos",
               target_os = "bitrig",
               target_os = "netbsd",
@@ -200,6 +202,7 @@
 }
 
 #[cfg(not(any(target_os = "linux",
+              target_os = "gnu",
               target_os = "macos",
               target_os = "bitrig",
               target_os = "dragonfly",
--- src/libstd/sys/unix/thread.rs
+++ src/libstd/sys/unix/thread.rs
@@ -135,12 +135,13 @@
         }
     }
     #[cfg(any(target_env = "newlib",
+              target_os = "gnu",
               target_os = "solaris",
               target_os = "haiku",
               target_os = "l4re",
               target_os = "emscripten"))]
     pub fn set_name(_name: &CStr) {
-        // Newlib, Illumos, Haiku, and Emscripten have no way to set a thread name.
+        // Newlib, Hurd, Illumos, Haiku, and Emscripten have no way to set a thread name.
     }
     #[cfg(target_os = "fuchsia")]
     pub fn set_name(_name: &CStr) {
@@ -232,7 +233,7 @@
         current().map(|s| s as *mut libc::c_void)
     }
 
-    #[cfg(any(target_os = "android", target_os = "freebsd",
+    #[cfg(any(target_os = "android", target_os = "freebsd", target_os = "gnu",
               target_os = "linux", target_os = "netbsd", target_os = "l4re"))]
     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {
         let mut ret = None;
@@ -334,7 +335,7 @@
         })
     }
 
-    #[cfg(any(target_os = "android", target_os = "freebsd",
+    #[cfg(any(target_os = "android", target_os = "freebsd", target_os = "gnu",
               target_os = "linux", target_os = "netbsd", target_os = "l4re"))]
     pub unsafe fn current() -> Option<usize> {
         let mut ret = None;
--- src/libtest/lib.rs
+++ src/libtest/lib.rs
@@ -1225,6 +1225,7 @@
     }
 
     #[cfg(any(target_os = "linux",
+              target_os = "gnu",
               target_os = "macos",
               target_os = "ios",
               target_os = "android",
--- src/libunwind/build.rs
+++ src/libunwind/build.rs
@@ -20,6 +20,8 @@
         } else if !target.contains("android") {
             println!("cargo:rustc-link-lib=gcc_s");
         }
+    } else if target.contains("gnu") {
+        println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("freebsd") {
         println!("cargo:rustc-link-lib=gcc_s");
     } else if target.contains("rumprun") {
