This removes the installation's root requirement, compiles guile modules, adds
support for a drop-in system cron directory, and allows the cron daemon to run
in the foreground by default for dmd.

--- makefile.am
+++ makefile.am
@@ -55,15 +55,12 @@
 
 
 install-exec-hook:
-	@if [ "x@NO_VIXIE_CLOBBER@" != "xyes"   -a   "`id -u`" -eq "0" ]; then \
+	@if [ "x@NO_VIXIE_CLOBBER@" != "xyes"   -a   "0" -eq "0" ]; then \
        rm -f $(fpp)cron$(EXEEXT) > /dev/null 2>&1; \
        $(INSTALL) --mode='u=rwx' mcron$(EXEEXT) $(fpp)cron$(EXEEXT); \
        rm -f $(fpp)crontab$(EXEEXT) > /dev/null 2>&1; \
        $(INSTALL) --mode='u=rwxs,og=rx' mcron$(EXEEXT) $(fpp)crontab$(EXEEXT); \
-       $(INSTALL) -d --mode='u=rwx' $(DESTDIR)/var/cron; \
-       $(INSTALL) -d --mode='u=rwx,og=rx' $(DESTDIR)/var/run; \
-       $(INSTALL) -d --mode='u=rwx,og=rx' $(DESTDIR)@GUILE_SITE@; \
-       $(INSTALL) -d --mode='u=rwx,og=rx' $(DESTDIR)@GUILE_SITE@/mcron; \
+       $(INSTALL) -d --mode='u=rwx' $(DESTDIR)$(CONFIG_SPOOL_DIR); \
     elif [ "x@NO_VIXIE_CLOBBER@" = "xyes" ]; then \
        echo "Not installing Vixie-style programs"; \
     else \
@@ -72,7 +69,7 @@
 
 
 uninstall-hook:
-	if [ "`id -u`" -eq "0" ]; then \
+	if [ "0" -eq "0" ]; then \
         rm -f $(fpp){cron,crontab}$(EXEEXT); \
     fi
 
--- scm/mcron/makefile.am
+++ scm/mcron/makefile.am
@@ -4,6 +4,14 @@
 
 pkgdata_DATA = core.scm environment.scm job-specifier.scm redirect.scm \
                vixie-time.scm vixie-specification.scm config.scm
+nodist_pkgdata_DATA = $(pkgdata_DATA:%.scm=%.go)
+
+%.go: %.scm
+	guild compile --target="$(host_alias)" \
+		-L "$(top_builddir)/scm" \
+		-L "$(top_srcdir)/scm" \
+		-Wformat -Wunbound-variable -Warity-mismatch \
+		-o "$@" "$<"
 
 
 # If you're wondering, the configure script keeps deleting all files with a name
--- mcron.c.template
+++ mcron.c.template
@@ -113,6 +113,7 @@
 main (int argc, char **argv)
 {
   setenv ("GUILE_LOAD_PATH", GUILE_LOAD_PATH, 1);
+  setenv ("GUILE_LOAD_COMPILED_PATH", GUILE_LOAD_PATH, 1);
   
   scm_boot_guile (argc, argv, inner_main, 0);
   
--- scm/mcron/main.scm
+++ scm/mcron/main.scm
@@ -368,6 +368,26 @@
 
 
 
+;; This basically makes files in /etc/cron.d behave like /etc/crontab files.
+
+(define* (process-files-in-drop-in-directory #:optional (confd "/etc/cron.d"))
+  (catch #t
+         (lambda ()
+           (let ((directory (opendir confd)))
+             (do ((file-name (readdir directory) (readdir directory)))
+                 ((eof-object? file-name))
+               (and-let* ((full-path (string-append confd "/" file-name))
+                          ((eq? (stat:type (stat full-path)) 'regular)))
+                         (catch-mcron-error
+                          (read-vixie-file full-path
+                                           parse-system-vixie-line))))))
+         (lambda (key . args)
+           (mcron-error
+            4
+            "You do not have permission to access /etc/cron.d files."))))
+
+
+
 ;; Having defined all the necessary procedures for scanning various sets of
 ;; files, we perform the actual configuration of the program depending on the
 ;; personality we are running as. If it is mcron, we either scan the files
@@ -383,6 +404,7 @@
                           (option-ref options '() '()))))
   
   ((cron) (process-files-in-system-directory)
+   (process-files-in-drop-in-directory)
    (use-system-job-list)
    (catch-mcron-error
     (read-vixie-file "/etc/crontab" parse-system-vixie-line))
@@ -416,18 +440,18 @@
     
 
 
-;; If we are supposed to run as a daemon process (either a --daemon option has
-;; been explicitly used, or we are running as cron or crond), detach from the
-;; terminal now. If we are running as cron, we can now write the PID file.
+;; If we are supposed to run as a daemon process (a --daemon option has been
+;; explicitly used), detach from the terminal now. If we are running as cron,
+;; we can now write the PID file.
 
-(if (option-ref options 'daemon (eq? command-type 'cron))
-    (begin
-      (if (not (eqv? (primitive-fork) 0))
-          (quit))
-      (setsid)
-      (if (eq? command-type 'cron)
-          (with-output-to-file config-pid-file
-            (lambda () (display (getpid)) (newline))))))
+(if (option-ref options 'daemon #f)
+    (if (eqv? (primitive-fork) 0)
+        (setsid)
+        (quit)))
+
+(if (eq? command-type 'cron)
+    (with-output-to-file config-pid-file
+      (lambda () (display (getpid)) (newline))))
 
 
 
