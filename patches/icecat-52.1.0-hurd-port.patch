Add a GNU port.  This is wildly incomplete.  Fight with it until it works.

--- build/gyp.mozbuild
+++ build/gyp.mozbuild
@@ -96,6 +96,7 @@
     'WINNT': 'win',
     'Android': 'linux' if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gonk' else 'android',
     'Linux': 'linux',
+    'gnu': 'gnu',
     'Darwin': 'mac' if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa' else 'ios',
     'SunOS': 'solaris',
     'GNU/kFreeBSD': 'freebsd',
--- dom/plugins/ipc/PluginModuleChild.cpp
+++ dom/plugins/ipc/PluginModuleChild.cpp
@@ -289,7 +289,7 @@
 
     // TODO: use PluginPRLibrary here
 
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     mShutdownFunc =
         (NP_PLUGINSHUTDOWN) PR_FindFunctionSymbol(mLibrary, "NP_Shutdown");
 
@@ -1851,7 +1851,7 @@
     AssertPluginThread();
     MOZ_ASSERT(mIsChrome);
 
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     return true;
 #elif defined(OS_WIN) || defined(OS_MACOSX)
     *_retval = mGetEntryPointsFunc(&mFunctions);
@@ -1896,7 +1896,7 @@
 #endif
 
     NPError result;
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     result = mInitializeFunc(&sBrowserFuncs, &mFunctions);
 #elif defined(OS_WIN) || defined(OS_MACOSX)
     result = mInitializeFunc(&sBrowserFuncs);
--- dom/plugins/ipc/PluginModuleChild.h
+++ dom/plugins/ipc/PluginModuleChild.h
@@ -277,7 +277,7 @@
 
     // we get this from the plugin
     NP_PLUGINSHUTDOWN mShutdownFunc;
-#if defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
     NP_PLUGINUNIXINIT mInitializeFunc;
 #elif defined(OS_WIN) || defined(OS_MACOSX)
     NP_PLUGININIT mInitializeFunc;
--- dom/storage/DOMStorageDBThread.cpp
+++ dom/storage/DOMStorageDBThread.cpp
@@ -263,7 +263,7 @@
 
   if (mStopIOThread) {
     // Thread use after shutdown demanded.
-    MOZ_ASSERT(false);
+//  MOZ_ASSERT(false);
     return NS_ERROR_NOT_INITIALIZED;
   }
 
--- gfx/graphite2/src/inc/UtfCodec.h
+++ gfx/graphite2/src/inc/UtfCodec.h
@@ -213,7 +213,7 @@
 
     _utf_iterator(const void * us=0)    : cp(reinterpret_cast<C *>(const_cast<void *>(us))), sl(1) { }
 
-    _utf_iterator   & operator ++ ()    { cp += abs(sl); return *this; }
+    _utf_iterator   & operator ++ ()    { cp += abs((int)sl); return *this; }
     _utf_iterator   operator ++ (int)   { _utf_iterator tmp(*this); operator++(); return tmp; }
 
     bool operator == (const _utf_iterator & rhs) const throw() { return cp >= rhs.cp; }
--- ipc/chromium/chromium-config.mozbuild
+++ ipc/chromium/chromium-config.mozbuild
@@ -65,5 +65,8 @@
             'OS_BSD': 1,
         })
 
+    elif CONFIG['OS_ARCH'] == 'GNU':
+        DEFINES['OS_GNU'] = 1
+
     else:
         DEFINES['OS_LINUX'] = 1
--- ipc/chromium/moz.build
+++ ipc/chromium/moz.build
@@ -105,6 +105,13 @@
         'src/base/platform_thread_mac.mm',
     ]
 
+if os_gnu:
+    SOURCES += [
+        'src/base/atomicops_internals_x86_gcc.cc',
+        'src/base/process_util_linux.cc',
+        'src/base/time_posix.cc',
+    ]
+
 if os_bsd:
     SOURCES += [
         'src/base/atomicops_internals_x86_gcc.cc',
--- ipc/chromium/src/base/process_util_posix.cc
+++ ipc/chromium/src/base/process_util_posix.cc
@@ -117,7 +117,7 @@
 #if defined(ANDROID)
   static const rlim_t kSystemDefaultMaxFds = 1024;
   static const char kFDDir[] = "/proc/self/fd";
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
   static const rlim_t kSystemDefaultMaxFds = 8192;
   static const char kFDDir[] = "/proc/self/fd";
 #elif defined(OS_MACOSX)
@@ -209,7 +209,7 @@
 // TODO(agl): Remove this function. It's fundamentally broken for multithreaded
 // apps.
 void SetAllFDsToCloseOnExec() {
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_GNU)
   const char fd_dir[] = "/proc/self/fd";
 #elif defined(OS_MACOSX) || defined(OS_BSD)
   const char fd_dir[] = "/dev/fd";
--- ipc/chromium/src/build/build_config.h
+++ ipc/chromium/src/build/build_config.h
@@ -22,6 +22,8 @@
 #define OS_LINUX 1
 #elif defined(__APPLE__)
 #define OS_MACOSX 1
+#elif defined(__GNU__)
+#define OS_GNU 1
 #elif defined(__linux__)
 #define OS_LINUX 1
 #elif defined(__DragonFly__)
@@ -47,7 +49,7 @@
 
 // For access to standard POSIX features, use OS_POSIX instead of a more
 // specific macro.
-#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD)
+#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
 #define OS_POSIX 1
 #endif
 
--- ipc/chromium/src/chrome/common/transport_dib.h
+++ ipc/chromium/src/chrome/common/transport_dib.h
@@ -15,7 +15,7 @@
 
 #if defined(OS_WIN)
 #include <windows.h>
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
 #include "chrome/common/x11_util.h"
 #endif
 
@@ -68,7 +68,7 @@
   typedef base::SharedMemoryHandle Handle;
   // On Mac, the inode number of the backing file is used as an id.
   typedef base::SharedMemoryId Id;
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
   typedef int Handle;  // These two ints are SysV IPC shared memory keys
   typedef int Id;
 #endif
@@ -98,7 +98,7 @@
   // wire to give this transport DIB to another process.
   Handle handle() const;
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_GNU)
   // Map the shared memory into the X server and return an id for the shared
   // segment.
   XID MapToX(Display* connection);
@@ -109,7 +109,7 @@
 #if defined(OS_WIN) || defined(OS_MACOSX) || defined(OS_BSD)
   explicit TransportDIB(base::SharedMemoryHandle dib);
   base::SharedMemory shared_memory_;
-#elif defined(OS_LINUX)
+#elif defined(OS_LINUX) || defined(OS_GNU)
   int key_;  // SysV shared memory id
   void* address_;  // mapped address
   XID x_shm_;  // X id for the shared segment
--- ipc/chromium/src/third_party/libeventcommon.mozbuild
+++ ipc/chromium/src/third_party/libeventcommon.mozbuild
@@ -9,6 +9,7 @@
 os_macosx = 0
 os_bsd = 0
 os_linux = 0
+os_gnu = 0
 
 if CONFIG['OS_ARCH'] == 'WINNT':
     os_win = 1
@@ -21,6 +22,9 @@
                                'NetBSD', 'OpenBSD']:
         os_bsd = 1
         libevent_include_suffix = 'bsd'
+    elif CONFIG['OS_ARCH'] == 'GNU':
+        os_gnu = 1
+        libevent_include_suffix = 'gnu'
     else:
         os_linux = 1
         if CONFIG['OS_TARGET'] == 'Android':
--- ipc/glue/GeckoChildProcessHost.cpp
+++ ipc/glue/GeckoChildProcessHost.cpp
@@ -744,7 +744,7 @@
   // and passing wstrings from one config to the other is unsafe.  So
   // we split the logic here.
 
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD) || defined(OS_GNU)
   base::environment_map newEnvVars;
   ChildPrivileges privs = mPrivileges;
   if (privs == base::PRIVILEGES_DEFAULT) {
@@ -766,7 +766,7 @@
     MOZ_ASSERT(gGREBinPath);
     nsCString path;
     NS_CopyUnicodeToNative(nsDependentString(gGREBinPath), path);
-# if defined(OS_LINUX) || defined(OS_BSD)
+# if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
 #  if defined(MOZ_WIDGET_ANDROID)
     path += "/lib";
 #  endif  // MOZ_WIDGET_ANDROID
@@ -903,7 +903,7 @@
   childArgv.push_back(pidstring);
 
 #if defined(MOZ_CRASHREPORTER)
-#  if defined(OS_LINUX) || defined(OS_BSD)
+#  if defined(OS_LINUX) || defined(OS_BSD) || defined(OS_GNU)
   int childCrashFd, childCrashRemapFd;
   if (!CrashReporter::CreateNotificationPipeForChild(
         &childCrashFd, &childCrashRemapFd))
@@ -936,7 +936,7 @@
   childArgv.push_back(childProcessType);
 
   base::LaunchApp(childArgv, mFileMap,
-#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD)
+#if defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_BSD) || defined(OS_GNU)
                   newEnvVars, privs,
 #endif
                   false, &process, arch);
--- js/src/threading/posix/Thread.cpp
+++ js/src/threading/posix/Thread.cpp
@@ -159,8 +159,10 @@ js::ThisThread::SetName(const char* name
   rv = 0;
 #elif defined(__NetBSD__)
   rv = pthread_setname_np(pthread_self(), "%s", (void*)name);
-#else
+#elif defined(HAVE_PTHREAD_GETNAME_NP)
   rv = pthread_setname_np(pthread_self(), name);
+#else
+  rv = 0;
 #endif
   MOZ_RELEASE_ASSERT(!rv);
 }
--- js/src/wasm/WasmSignalHandlers.cpp
+++ js/src/wasm/WasmSignalHandlers.cpp
@@ -118,8 +118,8 @@
 # define R13_sig(p) ((p)->sc_r13)
 # define R14_sig(p) ((p)->sc_r14)
 # define R15_sig(p) ((p)->sc_r15)
-#elif defined(__linux__) || defined(SOLARIS)
-# if defined(__linux__)
+#elif defined(__linux__) || defined(__GNU__) || defined(SOLARIS)
+# if defined(__linux__) || defined(__GNU__)
 #  define XMM_sig(p,i) ((p)->uc_mcontext.fpregs->_xmm[i])
 #  define EIP_sig(p) ((p)->uc_mcontext.gregs[REG_EIP])
 # else
--- media/webrtc/trunk/build/build_config.h
+++ media/webrtc/trunk/build/build_config.h
@@ -28,6 +28,9 @@
 #define OS_ANDROID 1
 #elif defined(__native_client__)
 #define OS_NACL 1
+#elif defined(__GNU__)
+#define OS_GNU 1
+#define TOOLKIT_GTK
 #elif defined(__linux__)
 #define OS_LINUX 1
 // Use TOOLKIT_GTK on linux if TOOLKIT_VIEWS isn't defined.
@@ -69,7 +72,7 @@
 
 // For access to standard POSIXish features, use OS_POSIX instead of a
 // more specific macro.
-#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_BSD) ||	\
+#if defined(OS_MACOSX) || defined(OS_LINUX) || defined(OS_GNU) || defined(OS_BSD) || \
     defined(OS_SOLARIS) || defined(OS_ANDROID) || defined(OS_NACL)
 #define OS_POSIX 1
 #endif
@@ -80,7 +83,7 @@
 #endif
 
 // Use tcmalloc
-#if (defined(OS_WIN) || defined(OS_LINUX)) && !defined(NO_TCMALLOC)
+#if (defined(OS_WIN) || defined(OS_LINUX) || defined(OS_GNU)) && !defined(NO_TCMALLOC)
 #define USE_TCMALLOC 1
 #endif
 
--- netwerk/sctp/src/netinet/sctp_os_userspace.h
+++ netwerk/sctp/src/netinet/sctp_os_userspace.h
@@ -532,7 +532,7 @@
 #include <netinet/ip6.h>
 #include <netinet/icmp6.h>
 #endif
-#if defined(__Userspace_os_Darwin) || defined(__Userspace_os_FreeBSD) || defined(__Userspace_os_Linux) || defined(__Userspace_os_NetBSD) || defined(__Userspace_os_OpenBSD) || defined(__Userspace_os_Windows)
+#if defined(__Userspace_os_Darwin) || defined(__Userspace_os_FreeBSD) || defined(__Userspace_os_Linux) || defined(__Userspace_os_NetBSD) || defined(__Userspace_os_OpenBSD) || defined(__Userspace_os_Windows) || defined(__Userspace_os_gnu)
 #include "user_ip6_var.h"
 #else
 #include <netinet6/ip6_var.h>
--- netwerk/sctp/src/netinet/sctp_output.c
+++ netwerk/sctp/src/netinet/sctp_output.c
@@ -54,7 +54,7 @@
 #include <netinet/sctp_bsd_addr.h>
 #include <netinet/sctp_input.h>
 #include <netinet/sctp_crc32.h>
-#if defined(__Userspace_os_Linux)
+#if defined(__Userspace_os_Linux) || defined(__Userspace_os_gnu)
 #define __FAVOR_BSD    /* (on Ubuntu at least) enables UDP header field names like BSD in RFC 768 */
 #endif
 #if defined(INET) || defined(INET6)
--- netwerk/sctp/src/user_ip6_var.h
+++ netwerk/sctp/src/user_ip6_var.h
@@ -87,13 +87,11 @@
 #if defined(__Userspace_os_Windows)
 #define s6_addr16 u.Word
 #endif
-#if !defined(__Userspace_os_Windows)
-#if !defined(__Userspace_os_Linux)
+#if !defined(__Userspace_os_Windows) && !defined(__Userspace_os_Linux) && !defined(__Userspace_os_gnu)
 #define s6_addr8  __u6_addr.__u6_addr8
 #define s6_addr16 __u6_addr.__u6_addr16
 #define s6_addr32 __u6_addr.__u6_addr32
 #endif
-#endif
 
 #if !defined(__Userspace_os_FreeBSD) && !defined(__Userspace_os_OpenBSD) && !defined(__Userspace_os_DragonFly)
 struct route_in6 {
--- netwerk/sctp/src/user_recv_thread.c
+++ netwerk/sctp/src/user_recv_thread.c
@@ -32,6 +32,11 @@
 #include <sys/types.h>
 #if !defined(__Userspace_os_Windows)
 #include <sys/socket.h>
+#ifndef __USE_GNU
+# define __USE_GNU
+# include <netinet/in.h>
+# undef __USE_GNU
+#endif
 #include <netinet/in.h>
 #include <unistd.h>
 #include <pthread.h>
--- netwerk/sctp/src/user_socket.c
+++ netwerk/sctp/src/user_socket.c
@@ -1,3 +1,5 @@
+#define ERESTART EINTR
+#define UIO_MAXIOV 1024
 /*-
  * Copyright (c) 1982, 1986, 1988, 1990, 1993
  *      The Regents of the University of California.
@@ -42,7 +44,7 @@
 #ifdef INET6
 #include <netinet6/sctp6_var.h>
 #endif
-#if defined(__Userspace_os_Linux)
+#if defined(__Userspace_os_Linux) || defined(__Userspace_os_gnu)
 #define __FAVOR_BSD    /* (on Ubuntu at least) enables UDP header field names like BSD in RFC 768 */
 #endif
 #if !defined (__Userspace_os_Windows)
--- python/mozbuild/mozbuild/configure/constants.py
+++ python/mozbuild/mozbuild/configure/constants.py
@@ -31,6 +31,7 @@
     'Darwin',
     'DragonFly',
     'FreeBSD',
+    'GNU',
     'kFreeBSD',
     'Linux',
     'NetBSD',
@@ -93,6 +94,7 @@ kernel_preprocessor_checks = {
     'Darwin': '__APPLE__',
     'DragonFly': '__DragonFly__',
     'FreeBSD': '__FreeBSD__',
+    'GNU': '__GNU__',
     'kFreeBSD': '__FreeBSD_kernel__',
     'Linux': '__linux__',
     'NetBSD': '__NetBSD__',
--- security/pkix/lib/pkixnames.cpp
+++ security/pkix/lib/pkixnames.cpp
@@ -34,6 +34,7 @@
 // constraints, the reference identifier is the entire encoded name constraint
 // extension value.
 
+#include <string.h>
 #include "pkixcheck.h"
 #include "pkixutil.h"
 
--- storage/mozStorageConnection.cpp
+++ storage/mozStorageConnection.cpp
@@ -528,10 +528,10 @@
 {
   (void)Close();
 
-  MOZ_ASSERT(!mAsyncExecutionThread,
-             "AsyncClose has not been invoked on this connection!");
-  MOZ_ASSERT(!mAsyncExecutionThreadIsAlive,
-             "The async execution thread should have been shutdown!");
+//MOZ_ASSERT(!mAsyncExecutionThread,
+//           "AsyncClose has not been invoked on this connection!");
+//MOZ_ASSERT(!mAsyncExecutionThreadIsAlive,
+//           "The async execution thread should have been shutdown!");
 }
 
 NS_IMPL_ADDREF(Connection)
--- toolkit/library/libxul.mk
+++ toolkit/library/libxul.mk
@@ -4,7 +4,7 @@
 
 EXTRA_DEPS += $(topsrcdir)/toolkit/library/libxul.mk
 
-ifeq (Linux,$(OS_ARCH))
+ifneq (,$(filter Linux GNU,$(OS_ARCH)))
 ifneq (Android,$(OS_TARGET))
 OS_LDFLAGS += -Wl,-version-script,symverscript
 
@@ -29,7 +29,7 @@
 # Generate GDB pretty printer-autoload files only on Linux. OSX's GDB is
 # too old to support Python pretty-printers; if this changes, we could make
 # this 'ifdef GNU_CC'.
-ifeq (Linux,$(OS_ARCH))
+ifdef GNU_CC
 # Create a GDB Python auto-load file alongside the libxul shared library in
 # the build directory.
 PP_TARGETS += LIBXUL_AUTOLOAD
--- old-configure.in
+++ old-configure.in
@@ -1338,7 +1338,7 @@
 AC_LANG_C
 
 case "${OS_TARGET}" in
-Darwin)
+Darwin|gnu)
   ;;
 *)
   STL_FLAGS="-I${DIST}/stl_wrappers"
--- old-configure
+++ old-configure
@@ -7067,7 +7067,7 @@
 
 
 case "${OS_TARGET}" in
-Darwin)
+Darwin|gnu)
   ;;
 *)
   STL_FLAGS="-I${DIST}/stl_wrappers"
